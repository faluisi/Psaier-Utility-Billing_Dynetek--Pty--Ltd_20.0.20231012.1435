codeunit 50225 "XML Export Manager"
{
    procedure ExportEGlueFile(SalesInvoiceHeader: Record "Sales Invoice Header")
    var
        Meter: Record Meter;
        Measurement: Record Measurement;
        Customer: Record Customer;
        CountryRegion: Record "Country/Region";
        CompanyInformation: Record "Company Information";
        Contract: Record Contract;
        SalesInvoiceLine: Record "Sales Invoice Line";
        TarrifLine: Record "Tariff Line";
        VATManagerSetup: Record "VAT Manager Setup";
        PaymentDateLines: Record "Posted Payment Lines";
        Language: Record Language;
        TempBlob: Codeunit "Temp Blob";
        Declaration: XmlDeclaration;
        XmlDoc: XmlDocument;
        RootNode: XmlElement;
        ParentNode: XmlElement;
        ChildNode: XmlElement;
        Attribute: XmlAttribute;
        SuperChileNode: XmlElement;
        SuperChildNode2: XmlElement;
        SuperChildNode3: XmlElement;
        SuperChildNode4: XmlElement;
        SuperChildNode5: XmlElement;
        SuperChildNode6: XmlElement;
        SuperChildNode7: XmlElement;
        SuperChildNode8: XmlElement;
        XmlTxt: XmlText;
        IStream: InStream;
        OStream: OutStream;
        FileName: Text;
        TotalUnitCost: Decimal;
        TotalCount: Integer;
        NoOfMonths: Integer;
        MeasuremetCount: Integer;
        StartDate: Date;
        ENdDate: Date;
        ResourceNo: Code[20];
        ResourceNoList: List of[Code[20]];
        ConsumptionF1: Decimal;
        ConsumptionF2: Decimal;
        ConsumptionF3: Decimal;
        TotalConsumption: Decimal;
        LastActiveF1: Decimal;
        LastActiveF2: Decimal;
        LastActiveF3: Decimal;
        LastDate: Date;
        DueDate: Date;
    begin
        Clear(IStream);
        Clear(OStream);
        Clear(DueDate);
        TotalCount:=0;
        SalesInvoiceHeader.CalcFields("Remaining Amount", Amount, "Amount Including VAT", "VAT Amount");
        if Contract.Get(SalesInvoiceHeader."Contract No.")then;
        if CompanyInformation.get()then;
        if Customer.get(SalesInvoiceHeader."Sell-to Customer No.")then;
        Meter.Reset();
        Meter.SetRange("POD No.", Contract."POD No.");
        if Meter.FindFirst()then;
        if VATManagerSetup.Get(CopyStr(Contract."POD No.", 3, 3))then;
        if Language.Get(Customer."Language Code")then;
        GetDateInterval(SalesInvoiceHeader."AAT Invoice Contract Period", StartDate, ENdDate);
        //LottoBollette RootNode
        XmlDoc:=XmlDocument.Create();
        Declaration:=XmlDeclaration.Create('1.0', 'utf-8', 'no');
        XmlDoc.SetDeclaration(Declaration);
        RootNode:=XmlElement.Create('LottoBollette');
        Attribute:=XmlAttribute.CreateNamespaceDeclaration('xsi', 'http://www.w3.org/2001/XMLSchema-instance');
        RootNode.Add(Attribute);
        Attribute:=XmlAttribute.CreateNamespaceDeclaration('xsd', 'http://www.w3.org/2001/XMLSchema');
        RootNode.Add(Attribute);
        XmlDoc.Add(RootNode);
        //Bolletta
        ParentNode:=XmlElement.Create('Bollette');
        ChildNode:=XmlElement.Create('Bolletta');
        SuperChileNode:=XmlElement.Create('Layout');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('TipoLayout');
        XmlTxt:=XmlText.Create('S');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SequenzaNumerazione');
        XmlTxt:=XmlText.Create('01');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('NumeroBolletta');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."No.");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('DataEmissione');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceHeader."Document Date"));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        PaymentDateLines.Reset();
        PaymentDateLines.SetRange("Sales/Purchase", PaymentDateLines."Sales/Purchase"::Sales);
        PaymentDateLines.SetRange(Type, PaymentDateLines.Type::Invoice);
        PaymentDateLines.SetRange(Code, SalesInvoiceHeader."No.");
        if PaymentDateLines.FindLast()then DueDate:=PaymentDateLines."Due Date";
        SuperChileNode:=XmlElement.Create('DataScadenza');
        XmlTxt:=XmlText.Create(Format(DueDate));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('TotaleDaPagare');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceHeader."Remaining Amount"));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('TotaleDocumento');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceHeader.Amount));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('TotaleImponibile');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceHeader."Amount Including VAT"));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SplitPayment');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('TipoServizio');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('TipoDocumento');
        XmlTxt:=XmlText.Create('fat');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('PeriodoFatturazione');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."AAT Invoice Contract Period");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FrequenzaFatturazione');
        XmlTxt:=XmlText.Create(Format(Contract."Billing Interval"));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('StampaBollettino');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceHeader."No. Printed"));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('LetturaFuturaInizioAutoLettura');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('LetturaFuturaFineAutoLettura');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SalesInvoiceLine.Reset();
        SalesInvoiceLine.SetRange("Document No.", SalesInvoiceHeader."No.");
        if SalesInvoiceLine.FindSet()then begin
            SalesInvoiceLine.CalcSums("Unit Price");
            TotalUnitCost:=SalesInvoiceLine."Unit Price";
            TotalCount:=SalesInvoiceLine.Count;
        end;
        SuperChileNode:=XmlElement.Create('LetturaFuturaFineAutoLettura');
        XmlTxt:=XmlText.Create(Format(TotalUnitCost / TotalCount));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        MeasuremetCount:=0;
        Measurement.Reset();
        Measurement.SetCurrentKey("POD No.", "Meter Serial No.", Date);
        Measurement.SetRange("POD No.", Contract."POD No.");
        if CalcDate('<-1Y>', StartDate) > Contract."Contract Start Date" then Measurement.SetRange(Date, CalcDate('<-1Y>', StartDate), EndDate)
        else
            Measurement.SetRange(Date, Contract."Contract Start Date", EndDate);
        if Meter."Reading Type" = Meter."Reading Type"::Consumption then begin
            if Measurement.FindSet()then begin
                Measurement.CalcSums("Active F1", "Active F2", "Active F3", "Active Total");
                ConsumptionF1:=Measurement."Active F1";
                ConsumptionF2:=Measurement."Active F2";
                ConsumptionF3:=Measurement."Active F3";
                TotalConsumption:=Measurement."Active Total";
            end;
        end
        else
        begin
            if Measurement.FindLast()then begin
                ConsumptionF1:=Measurement."Active F1";
                ConsumptionF2:=Measurement."Active F2";
                ConsumptionF3:=Measurement."Active F3";
                TotalConsumption:=Measurement."Active Total";
            end;
            if Measurement.FindFirst()then begin
                ConsumptionF1:=ConsumptionF1 - Measurement."Active F1";
                ConsumptionF2:=ConsumptionF2 - Measurement."Active F2";
                ConsumptionF3:=ConsumptionF3 - Measurement."Active F3";
                TotalConsumption:=TotalConsumption - Measurement."Active Total";
            end;
        end;
        SuperChileNode:=XmlElement.Create('ConsumoAnnuoF1');
        XmlTxt:=XmlText.Create(Format(ConsumptionF1));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ConsumoAnnuoF2');
        XmlTxt:=XmlText.Create(Format(ConsumptionF2));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ConsumoAnnuoF3');
        XmlTxt:=XmlText.Create(Format(ConsumptionF3));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ConsumoAnnuoTotale');
        XmlTxt:=XmlText.Create(Format(TotalConsumption));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('EnergiaAttiva');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('EnergiaReattiva');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SpedizioneBolletta');
        XmlTxt:=XmlText.Create('S');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SpedizioneRagioneSociale');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to Customer Name");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SpedizionePresso');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to Customer Name 2");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SpedizioneFrazione');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to County");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SpedizioneIndirizzo');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to Address");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SpedizioneCivico');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to Address 2");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SpedizioneAlfa');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SpedizioneCap');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to Post Code");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SpedizioneCitta');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to City");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SpedizioneProvincia');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SpedizioneNazione');
        if CountryRegion.Get(SalesInvoiceHeader."Sell-to Country/Region Code")then XmlTxt:=XmlText.Create(CountryRegion.Name)
        else
            XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('SpedizioneIndirizzoElettronico');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to E-Mail");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ClienteFinaleRagioneSociale');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to Customer Name");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ClienteFinaleFrazione');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to County");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ClienteFinaleIndirizzo');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to Address");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ClienteFinaleCivico');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to Address 2");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ClienteFinaleAlfa');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ClienteFinaleCap');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to Post Code");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ClienteFinaleCitta');
        XmlTxt:=XmlText.Create(SalesInvoiceHeader."Sell-to City");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ClienteFinaleProvincia');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ClienteFinaleNazione');
        if CountryRegion.Get(SalesInvoiceHeader."Sell-to Country/Region Code")then XmlTxt:=XmlText.Create(CountryRegion.Name)
        else
            XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ClienteFinaleCodice');
        XmlTxt:=XmlText.Create(Customer."No.");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ClienteFinalePartitaIva');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ClienteFinaleCodiceFiscale');
        XmlTxt:=XmlText.Create(Customer."Fiscal Code");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FornituraCodicePDP');
        XmlTxt:=XmlText.Create(Contract."POD No.");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FornituraIndirizzo');
        XmlTxt:=XmlText.Create(Contract."Physical Address");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FornituraCivico');
        XmlTxt:=XmlText.Create(Contract."Physical Address 2");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FornituraCivicoAlternativo');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FornituraScala');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FornituraPiano');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FornituraInterno');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FornituraCap');
        XmlTxt:=XmlText.Create(Contract."Physical Post Code");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FornituraComune');
        XmlTxt:=XmlText.Create(Contract."Physical City");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FornituraProvincia');
        XmlTxt:=XmlText.Create(Contract."Physical Country Code");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FornituraLocalita');
        XmlTxt:=XmlText.Create(Contract."Physical City");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FornituraBeneficiario');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('FornituraServizio');
        XmlTxt:=XmlText.Create('E');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ProntoIntervento');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('DistributoreCompetente');
        XmlTxt:=XmlText.Create(VATManagerSetup."Distributor Name");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('DataAttivazioneFornitura');
        XmlTxt:=XmlText.Create(Format(Contract."Contract Start Date"));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('TensioneAlimentazione');
        XmlTxt:=XmlText.Create(Format(Contract."Voltage Type") + ' - ' + Format(Contract.Voltage));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('Offerta');
        XmlTxt:=XmlText.Create('Mitglied - Haushalt mit Zeitzonen');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('CodOfferta');
        XmlTxt:=XmlText.Create('DOM2_Mlde');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('DataInizioOfferta');
        XmlTxt:=XmlText.Create(Format(Contract."Contract Start Date"));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('TipoMercato');
        XmlTxt:=XmlText.Create(Format(Contract.Market));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('TipoUso');
        XmlTxt:=XmlText.Create(Format(Contract.Usage));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('CodiceAutoLettura');
        XmlTxt:=XmlText.Create(Contract."No.");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('CodiceContratto');
        XmlTxt:=XmlText.Create(Contract."No.");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('DepositoCauzionale');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('Bollo');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('Rateizzazione');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('DIProtocolloDichiarante');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('DIProtocolloFornitore');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('CabinaNumero');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('BonusAmmissione');
        XmlTxt:=XmlText.Create('0');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('TipoBonus');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('BonusRichiestaData');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('CorrispettivoCMor');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ServizioClientiTelefono');
        XmlTxt:=XmlText.Create(CompanyInformation."Phone No.");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ServizioFax');
        XmlTxt:=XmlText.Create(CompanyInformation."Fax No.");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ServizioIndirizzo');
        XmlTxt:=XmlText.Create(CompanyInformation.Address);
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ServizioCap');
        XmlTxt:=XmlText.Create(CompanyInformation."Post Code");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ServizioComune');
        XmlTxt:=XmlText.Create(CompanyInformation.City);
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ServizioProvincia');
        XmlTxt:=XmlText.Create(CompanyInformation.County);
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ServizioEmail');
        XmlTxt:=XmlText.Create(CompanyInformation."E-Mail");
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        //Imposte
        SuperChileNode:=XmlElement.Create('Imposte');
        SuperChildNode2:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Totale');
        XmlTxt:=XmlText.Create('');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        //DettagliImposte
        TarrifLine.Reset();
        SalesInvoiceLine.Reset();
        TarrifLine.SetRange("Tariff No.", SalesInvoiceHeader."Tariff No.");
        TarrifLine.SetRange("Line Cost Type", TarrifLine."Line Cost Type"::"Acciso Cost");
        if TarrifLine.FindFirst()then begin
            SalesInvoiceLine.SetRange("Document No.", SalesInvoiceHeader."No.");
            SalesInvoiceLine.SetRange("Dyn. Inv. Template No.", TarrifLine."Dyn. Inv. Template No.");
            if SalesInvoiceLine.FindSet()then SalesInvoiceLine.CalcSums(Quantity, "Line Amount", "Unit Price");
        end;
        SuperChildNode2:=XmlElement.Create('DettagliImposte');
        SuperChildNode3:=XmlElement.Create('QuotaDettaglioImposte');
        SuperChildNode4:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('Staatssteuer');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Quantita');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceLine.Quantity));
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Dal');
        XmlTxt:=XmlText.Create(Format(StartDate));
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Al');
        XmlTxt:=XmlText.Create(Format(ENdDate));
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Scaglione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Imponibile');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."Line Amount"));
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('ImportoUnitario');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."Unit Price"));
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('AliquotaIva');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."VAT %"));
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('CodiceIva');
        XmlTxt:=XmlText.Create(SalesInvoiceLine."VAT Clause Code");
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        //AccontiImposte
        SuperChildNode2:=XmlElement.Create('AccontiImposte');
        SuperChildNode3:=XmlElement.Create('QuotaDettaglioImposte');
        SuperChildNode4:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Quantita');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Dal');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Al');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Scaglione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Imponibile');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('ImportoUnitario');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('AliquotaIva');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('CodiceIva');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        //ConsumiBollettaEle
        SuperChileNode:=XmlElement.Create('ConsumiBollettaEle');
        SuperChildNode2:=XmlElement.Create('ConsumoELetture');
        SuperChildNode3:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('Energia attiva');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        ConsumptionF1:=0;
        ConsumptionF2:=0;
        ConsumptionF3:=0;
        TotalConsumption:=0;
        Measurement.Reset();
        Measurement.SetCurrentKey("POD No.", "Meter Serial No.", Date);
        Measurement.SetRange("POD No.", Contract."POD No.");
        Measurement.SetRange(Date, StartDate, EndDate);
        if Meter."Reading Type" = Meter."Reading Type"::Consumption then begin
            if Measurement.FindSet()then begin
                Measurement.CalcSums("Active F1", "Active F2", "Active F3", "Active Total");
                ConsumptionF1:=Measurement."Active F1";
                ConsumptionF2:=Measurement."Active F2";
                ConsumptionF3:=Measurement."Active F3";
                TotalConsumption:=Measurement."Active Total";
            end;
        end
        else
        begin
            if Measurement.FindLast()then begin
                ConsumptionF1:=Measurement."Active F1";
                ConsumptionF2:=Measurement."Active F2";
                ConsumptionF3:=Measurement."Active F3";
                TotalConsumption:=Measurement."Active Total";
            end;
        end;
        if Meter."Reading Type" = Meter."Reading Type"::Consumption then begin
            Measurement.Reset();
            Measurement.SetCurrentKey("POD No.", "Meter Serial No.", Date);
            Measurement.SetRange("POD No.", Contract."POD No.");
            Measurement.SetFilter(Date, ',,%1', CalcDate('<-1D>', StartDate));
            if Measurement.FindSet()then begin
                Measurement.CalcSums("Active F1", "Active F2", "Active F3", "Active Total");
                ConsumptionF1:=ConsumptionF1 - Measurement."Active F1";
                ConsumptionF2:=ConsumptionF2 - Measurement."Active F2";
                ConsumptionF3:=ConsumptionF3 - Measurement."Active F3";
                TotalConsumption:=TotalConsumption - Measurement."Active Total";
            end;
        end;
        SuperChildNode3:=XmlElement.Create('TotaleFascia1');
        XmlTxt:=XmlText.Create(Format(ConsumptionF1));
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('TotaleFascia2');
        XmlTxt:=XmlText.Create(Format(ConsumptionF2));
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('TotaleFascia3');
        XmlTxt:=XmlText.Create(Format(ConsumptionF3));
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Totale');
        XmlTxt:=XmlText.Create(Format(TotalConsumption));
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('DettagliConsumo');
        LastActiveF1:=0;
        LastActiveF2:=0;
        LastActiveF3:=0;
        Clear(LastDate);
        Measurement.Reset();
        Measurement.SetCurrentKey("POD No.", "Meter Serial No.", Date);
        Measurement.SetRange("POD No.", Contract."POD No.");
        Measurement.SetFilter(Date, '..%1', CalcDate('<-1D>', StartDate));
        if Measurement.FindLast()then begin
            LastDate:=Measurement.Date;
            LastActiveF1:=Measurement."Active F1";
            LastActiveF2:=Measurement."Active F2";
            LastActiveF3:=Measurement."Active F3";
        end;
        Measurement.Reset();
        Measurement.SetCurrentKey("POD No.", "Meter Serial No.", Date);
        Measurement.SetRange("POD No.", Contract."POD No.");
        Measurement.SetRange(Date, StartDate, EndDate);
        if Measurement.FindSet()then repeat SuperChildNode4:=XmlElement.Create('Consumo');
                SuperChildNode5:=XmlElement.Create('DataLetturaPrecedente');
                XmlTxt:=XmlText.Create(Format(LastDate));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('Fascia1Precedente');
                XmlTxt:=XmlText.Create(Format(LastActiveF1));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('Fascia2Precedente');
                XmlTxt:=XmlText.Create(Format(LastActiveF2));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('Fascia3Precedente');
                XmlTxt:=XmlText.Create(Format(LastActiveF3));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('DataOPeriodo');
                XmlTxt:=XmlText.Create(Format(Measurement.Date));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('TipoLettura');
                XmlTxt:=XmlText.Create('');
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('Fascia1');
                XmlTxt:=XmlText.Create(Format(Measurement."Active F1"));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('PercentualeFascia1');
                XmlTxt:=XmlText.Create('');
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('Fascia2');
                XmlTxt:=XmlText.Create(Format(Measurement."Active F2"));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('PercentualeFascia2');
                XmlTxt:=XmlText.Create('');
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('Fascia3');
                XmlTxt:=XmlText.Create(Format(Measurement."Active F3"));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('PercentualeFascia3');
                XmlTxt:=XmlText.Create('');
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                if Meter."Reading Type" = Meter."Reading Type"::Consumption then begin
                    SuperChildNode5:=XmlElement.Create('TotaleParziale');
                    XmlTxt:=XmlText.Create(Format(Measurement."Active Total"));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                    SuperChildNode5:=XmlElement.Create('ConsumoF1');
                    XmlTxt:=XmlText.Create(Format(Measurement."Active F1"));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                    SuperChildNode5:=XmlElement.Create('ConsumoF2');
                    XmlTxt:=XmlText.Create(Format(Measurement."Active F2"));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                    SuperChildNode5:=XmlElement.Create('ConsumoF3');
                    XmlTxt:=XmlText.Create(Format(Measurement."Active F3"));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                end
                else
                begin
                    SuperChildNode5:=XmlElement.Create('TotaleParziale');
                    XmlTxt:=XmlText.Create(Format(Measurement."Active F1" - LastActiveF1 + Measurement."Active F2" - LastActiveF2 + Measurement."Active F3" - LastActiveF3));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                    SuperChildNode5:=XmlElement.Create('ConsumoF1');
                    XmlTxt:=XmlText.Create(Format(Measurement."Active F1" - LastActiveF1));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                    SuperChildNode5:=XmlElement.Create('ConsumoF2');
                    XmlTxt:=XmlText.Create(Format(Measurement."Active F2" - LastActiveF2));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                    SuperChildNode5:=XmlElement.Create('ConsumoF3');
                    XmlTxt:=XmlText.Create(Format(Measurement."Active F3" - LastActiveF3));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                end;
                SuperChildNode3.Add(SuperChildNode4);
                LastDate:=Measurement.Date;
                LastActiveF1:=Measurement."Active F1";
                LastActiveF2:=Measurement."Active F2";
                LastActiveF3:=Measurement."Active F3";
            until Measurement.Next() = 0;
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('ConsumoELetture');
        SuperChildNode3:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('Energia reattiva');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        ConsumptionF1:=0;
        ConsumptionF2:=0;
        ConsumptionF3:=0;
        TotalConsumption:=0;
        Measurement.Reset();
        Measurement.SetCurrentKey("POD No.", "Meter Serial No.", Date);
        Measurement.SetRange("POD No.", Contract."POD No.");
        Measurement.SetRange(Date, StartDate, EndDate);
        if Meter."Reading Type" = Meter."Reading Type"::Consumption then begin
            if Measurement.FindSet()then begin
                Measurement.CalcSums("Reactive F1", "Reactive F2", "Reactive F3", "Reactive Total");
                ConsumptionF1:=Measurement."Reactive F1";
                ConsumptionF2:=Measurement."Reactive F2";
                ConsumptionF3:=Measurement."Reactive F3";
                TotalConsumption:=Measurement."Reactive Total";
            end;
        end
        else
        begin
            if Measurement.FindLast()then begin
                ConsumptionF1:=Measurement."Reactive F1";
                ConsumptionF2:=Measurement."Reactive F2";
                ConsumptionF3:=Measurement."Reactive F3";
                TotalConsumption:=Measurement."Reactive Total";
            end;
        end;
        if Meter."Reading Type" = Meter."Reading Type"::Consumption then begin
            Measurement.Reset();
            Measurement.SetCurrentKey("POD No.", "Meter Serial No.", Date);
            Measurement.SetRange("POD No.", Contract."POD No.");
            Measurement.SetFilter(Date, '..%1', StartDate);
            if Measurement.FindSet()then begin
                Measurement.CalcSums("Reactive F1", "Reactive F2", "Reactive F3", "Reactive Total");
                ConsumptionF1:=ConsumptionF1 - Measurement."Reactive F1";
                ConsumptionF2:=ConsumptionF2 - Measurement."Reactive F2";
                ConsumptionF3:=ConsumptionF3 - Measurement."Reactive F3";
                TotalConsumption:=TotalConsumption - Measurement."Reactive Total";
            end;
        end;
        SuperChildNode3:=XmlElement.Create('TotaleFascia1');
        XmlTxt:=XmlText.Create(Format(ConsumptionF1));
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('TotaleFascia2');
        XmlTxt:=XmlText.Create(Format(ConsumptionF2));
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('TotaleFascia3');
        XmlTxt:=XmlText.Create(Format(ConsumptionF3));
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Totale');
        XmlTxt:=XmlText.Create(Format(TotalConsumption));
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('DettagliConsumo');
        LastActiveF1:=0;
        LastActiveF2:=0;
        LastActiveF3:=0;
        Clear(LastDate);
        Measurement.Reset();
        Measurement.SetCurrentKey("POD No.", "Meter Serial No.", Date);
        Measurement.SetRange("POD No.", Contract."POD No.");
        Measurement.SetFilter(Date, '..%1', CalcDate('<-1D>', StartDate));
        if Measurement.FindLast()then begin
            LastDate:=Measurement.Date;
            LastActiveF1:=Measurement."Reactive F1";
            LastActiveF2:=Measurement."Reactive F2";
            LastActiveF3:=Measurement."Reactive F3";
        end;
        Measurement.Reset();
        Measurement.SetCurrentKey("POD No.", "Meter Serial No.", Date);
        Measurement.SetRange("POD No.", Contract."POD No.");
        Measurement.SetRange(Date, StartDate, EndDate);
        if Measurement.FindSet()then repeat SuperChildNode4:=XmlElement.Create('Consumo');
                SuperChildNode5:=XmlElement.Create('DataLetturaPrecedente');
                XmlTxt:=XmlText.Create(Format(LastDate));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('Fascia1Precedente');
                XmlTxt:=XmlText.Create(Format(LastActiveF1));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('Fascia2Precedente');
                XmlTxt:=XmlText.Create(Format(LastActiveF2));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('Fascia3Precedente');
                XmlTxt:=XmlText.Create(Format(LastActiveF3));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('DataOPeriodo');
                XmlTxt:=XmlText.Create(Format(Measurement.Date));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('TipoLettura');
                XmlTxt:=XmlText.Create('');
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('Fascia1');
                XmlTxt:=XmlText.Create(Format(Measurement."Reactive F1"));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('PercentualeFascia1');
                XmlTxt:=XmlText.Create('');
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('Fascia2');
                XmlTxt:=XmlText.Create(Format(Measurement."Reactive F2"));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('PercentualeFascia2');
                XmlTxt:=XmlText.Create('');
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('Fascia3');
                XmlTxt:=XmlText.Create(Format(Measurement."Reactive F3"));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('PercentualeFascia3');
                XmlTxt:=XmlText.Create('');
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode5:=XmlElement.Create('TotaleParziale');
                XmlTxt:=XmlText.Create(Format(Measurement."Reactive Total"));
                SuperChildNode5.Add(XmlTxt);
                SuperChildNode4.Add(SuperChildNode5);
                if Meter."Reading Type" = Meter."Reading Type"::Consumption then begin
                    SuperChildNode5:=XmlElement.Create('ConsumoF1');
                    XmlTxt:=XmlText.Create(Format(Measurement."Reactive F1"));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                    SuperChildNode5:=XmlElement.Create('ConsumoF2');
                    XmlTxt:=XmlText.Create(Format(Measurement."Reactive F2"));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                    SuperChildNode5:=XmlElement.Create('ConsumoF3');
                    XmlTxt:=XmlText.Create(Format(Measurement."Reactive F3"));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                end
                else
                begin
                    SuperChildNode5:=XmlElement.Create('ConsumoF1');
                    XmlTxt:=XmlText.Create(Format(Measurement."Reactive F1" - LastActiveF1));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                    SuperChildNode5:=XmlElement.Create('ConsumoF2');
                    XmlTxt:=XmlText.Create(Format(Measurement."Reactive F2" - LastActiveF2));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                    SuperChildNode5:=XmlElement.Create('ConsumoF3');
                    XmlTxt:=XmlText.Create(Format(Measurement."Reactive F3" - LastActiveF3));
                    SuperChildNode5.Add(XmlTxt);
                    SuperChildNode4.Add(SuperChildNode5);
                end;
                SuperChildNode3.Add(SuperChildNode4);
                LastDate:=Measurement.Date;
                LastActiveF1:=Measurement."Active F1";
                LastActiveF2:=Measurement."Active F2";
                LastActiveF3:=Measurement."Active F3";
            until Measurement.Next() = 0;
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('MisuratoreTipologia');
        XmlTxt:=XmlText.Create(Format(Meter."Reading Type"));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('TrattamentoOrarioFatturazione');
        XmlTxt:=XmlText.Create('');
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('PotenzaDisponibile');
        XmlTxt:=XmlText.Create(Format(Contract."Available Power"));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('PotenzaImpegnata');
        XmlTxt:=XmlText.Create(Format(Contract."Contractual Power"));
        SuperChileNode.Add(XmlTxt);
        ChildNode.Add(SuperChileNode);
        //PotenzaPrelevata
        SuperChileNode:=XmlElement.Create('PotenzaPrelevata');
        SuperChildNode2:=XmlElement.Create('MassimaPotenzaPrelevata');
        SuperChildNode3:=XmlElement.Create('Data');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('PotenzaF1');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('PotenzaF2');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('PotenzaF3');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        SuperChileNode:=XmlElement.Create('ConsumoAnnuo');
        MeasuremetCount:=0;
        Measurement.Reset();
        Measurement.SetCurrentKey("POD No.", "Meter Serial No.", Date);
        Measurement.SetRange("POD No.", Contract."POD No.");
        if CalcDate('<-1Y>', StartDate) > Contract."Contract Start Date" then Measurement.SetRange(Date, CalcDate('<-1Y>', StartDate), EndDate)
        else
            Measurement.SetRange(Date, Contract."Contract Start Date", EndDate);
        if Measurement.FindSet()then repeat MeasuremetCount+=1;
                SuperChildNode2:=XmlElement.Create('Consumi');
                SuperChildNode3:=XmlElement.Create('SequenzaMese');
                XmlTxt:=XmlText.Create(Format(MeasuremetCount));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('Anno');
                XmlTxt:=XmlText.Create(Format(Date2DMY(Measurement.Date, 3)));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('Mese');
                XmlTxt:=XmlText.Create(Format(Date2DMY(Measurement.Date, 2)));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('TotaleEnergiaAttiva');
                XmlTxt:=XmlText.Create(Format(Measurement."Active Total"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('TotaleEnergiaReattiva');
                XmlTxt:=XmlText.Create(Format(Measurement."Reactive Total"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('F1');
                XmlTxt:=XmlText.Create(Format(Measurement."Active F1"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('F2');
                XmlTxt:=XmlText.Create(Format(Measurement."Active F2"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('F3');
                XmlTxt:=XmlText.Create(Format(Measurement."Active F3"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('Peak');
                XmlTxt:=XmlText.Create(Format(Measurement."Peak Total"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('OffPeak');
                XmlTxt:=XmlText.Create('');
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('R1');
                XmlTxt:=XmlText.Create(Format(Measurement."Reactive F1"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('R2');
                XmlTxt:=XmlText.Create(Format(Measurement."Reactive F2"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('R3');
                XmlTxt:=XmlText.Create(Format(Measurement."Reactive F3"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('Picco');
                XmlTxt:=XmlText.Create('');
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChileNode.Add(SuperChildNode2);
            until Measurement.Next() = 0;
        ChildNode.Add(SuperChileNode);
        //ConguaglioConsumiStimati
        SuperChileNode:=XmlElement.Create('ConguaglioConsumiStimati');
        SuperChildNode2:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('Conguaglio consumi stimati');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Quantita');
        XmlTxt:=XmlText.Create('');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Dal');
        XmlTxt:=XmlText.Create('');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Al');
        XmlTxt:=XmlText.Create('');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Imponibile');
        XmlTxt:=XmlText.Create('');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        //RettificheLetture
        SuperChileNode:=XmlElement.Create('RettificheLetture');
        SuperChildNode2:=XmlElement.Create('Rettifiche');
        SuperChildNode3:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Quantita');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Dal');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Al');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('DataLetturaRettificata');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('LetturaRettificataF1');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('LetturaRettificataF2');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('LetturaRettificataF3');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Imponibile');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        //ConguaglioTariffario
        SuperChileNode:=XmlElement.Create('ConguaglioTariffario');
        SuperChildNode2:=XmlElement.Create('Ricalcolo');
        SuperChildNode3:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Quantita');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Dal');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Al');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('ComponenteConguagliata');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Imponibile');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        //AltrePartite
        SuperChileNode:=XmlElement.Create('AltrePartite');
        SalesInvoiceLine.Reset();
        SalesInvoiceLine.SetRange("Document No.", SalesInvoiceHeader."No.");
        SalesInvoiceLine.SetFilter("Line Discount Amount", '<>%1', 0);
        if SalesInvoiceLine.FindSet()then repeat SuperChildNode2:=XmlElement.Create('QuotaDettaglioAltrePartite');
                SuperChildNode3:=XmlElement.Create('Descrizione');
                XmlTxt:=XmlText.Create(SalesInvoiceLine.Description);
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('Imponibile');
                XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."Line Discount Amount"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('AliquotaIva');
                XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."VAT %"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('CodiceIva');
                XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."VAT Clause Code"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChileNode.Add(SuperChildNode2);
            until SalesInvoiceLine.Next() = 0;
        ChildNode.Add(SuperChileNode);
        //BollettinoBolletta
        SuperChileNode:=XmlElement.Create('BollettinoBolletta');
        SuperChildNode2:=XmlElement.Create('Bollettino');
        SuperChildNode3:=XmlElement.Create('Importo');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('DataScadenza');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('StringaLettoreOttico');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('StringaPosteCampo1');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('StringaPosteCampo2');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('StringaPosteCampo3');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('StringaPosteCampo4');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('CodiceIBAN');
        XmlTxt:=XmlText.Create(Contract.IBAN);
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        //BollettinoBollettaMAV
        SuperChileNode:=XmlElement.Create('BollettinoBollettaMAV');
        SuperChildNode2:=XmlElement.Create('MAV');
        SuperChildNode3:=XmlElement.Create('Id');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Tipo');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('DataScadenza');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Importo');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('ABIC');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('BANCA');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('CABC');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Conto');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('CodiceAzienda');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('TipoCodice');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('CodiceDebitore');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('CodiceDivisa');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('DesCreditore');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('DesDebitore');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('CodFisDebitore');
        XmlTxt:=XmlText.Create(Customer."Fiscal Code");
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('IndirDebitore');
        XmlTxt:=XmlText.Create(Customer.Address);
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('CapDebitore');
        XmlTxt:=XmlText.Create(Customer."Post Code");
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('ComProvDebitore');
        XmlTxt:=XmlText.Create(Customer.City);
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('CodPaeseDebitore');
        XmlTxt:=XmlText.Create(Customer."Country/Region Code");
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('RifDebito');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('StringaPosteCampo1');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('StringaPosteCampo2');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('StringaPosteCampo3');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('StringaPosteCampo4');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        //MorositaDocumenti
        SuperChileNode:=XmlElement.Create('MorositaDocumenti');
        SuperChildNode2:=XmlElement.Create('Testo');
        XmlTxt:=XmlText.Create('Le precedenti bollette risultano pagate.');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Totale');
        XmlTxt:=XmlText.Create('');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('DataRifer');
        XmlTxt:=XmlText.Create('');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Dettagli');
        SuperChildNode3:=XmlElement.Create('Morosita');
        SuperChildNode4:=XmlElement.Create('NumeroDocumento');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Rata');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('DataEmissione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('DataScadenza');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('ImportoOriginale');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('ImportoDaPagare');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        //RiepilogoFornitura
        SuperChileNode:=XmlElement.Create('RiepilogoFornitura');
        SalesInvoiceLine.Reset();
        SalesInvoiceLine.SetRange("Document No.", SalesInvoiceHeader."No.");
        if SalesInvoiceLine.FindSet()then repeat if not ResourceNoList.Contains(SalesInvoiceLine."No.")then ResourceNoList.Add(SalesInvoiceLine."No.");
            until SalesInvoiceLine.Next() = 0;
        foreach ResourceNo in ResourceNoList do begin
            SalesInvoiceLine.Reset();
            SalesInvoiceLine.SetRange("Document No.", SalesInvoiceHeader."No.");
            SalesInvoiceLine.SetRange("No.", ResourceNo);
            if SalesInvoiceLine.FindSet()then begin
                SalesInvoiceLine.CalcSums("Amount Including VAT", "VAT Base Amount");
                SuperChildNode2:=XmlElement.Create('Importo');
                SuperChildNode3:=XmlElement.Create('Descrizione');
                XmlTxt:=XmlText.Create(SalesInvoiceLine.Description);
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('Imponibile');
                XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."Line Amount"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('AliquotaIva');
                XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."VAT %"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChildNode3:=XmlElement.Create('CodiceIva');
                XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."VAT Clause Code"));
                SuperChildNode3.Add(XmlTxt);
                SuperChildNode2.Add(SuperChildNode3);
                SuperChileNode.Add(SuperChildNode2);
            end;
        end;
        ChildNode.Add(SuperChileNode);
        SalesInvoiceLine.Reset();
        SalesInvoiceLine.SetRange("Document No.", SalesInvoiceHeader."No.");
        if SalesInvoiceLine.FindFirst()then;
        //RiepilogoIvaBolletta
        SuperChileNode:=XmlElement.Create('RiepilogoIvaBolletta');
        SuperChildNode2:=XmlElement.Create('RiepilogoIva');
        SuperChildNode3:=XmlElement.Create('DescrizioneImponibile');
        XmlTxt:=XmlText.Create('Taxable VAT 10%');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('DescrizioneAliquota');
        XmlTxt:=XmlText.Create('VAT 10% - MwSt. 10%');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Aliquota');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."VAT %"));
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Imponibile');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceHeader.Amount));
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Iva');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceHeader."VAT Amount"));
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('DIProtocolloDichiarante');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('DIProtocolloFornitore');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('TrattamentoIVA');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        //RiepilogoRigheFuoriCorpo
        SuperChileNode:=XmlElement.Create('RiepilogoRigheFuoriCorpo');
        SuperChildNode2:=XmlElement.Create('RigaFuoriCorpo');
        SuperChildNode3:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Totale');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        //ArrotondamentiBolletta
        SuperChileNode:=XmlElement.Create('ArrotondamentiBolletta');
        SuperChildNode2:=XmlElement.Create('Arrotondamento');
        SuperChildNode3:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Imponibile');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('CodiceIva');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Comunicazioni');
        SuperChildNode3:=XmlElement.Create('Categoria');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Codice');
        XmlTxt:=XmlText.Create('C');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Titolo');
        XmlTxt:=XmlText.Create('Allgemeine Information');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Testo');
        XmlTxt:=XmlText.Create('Bei Problemen mit der Stromversorgung wenden Sie sich bitte an die folgende Nummer: 349 8015344. Für Anfragen oder Beschwerden wenden Sie sich bitte an die Nummer 349 8015344 oder per E-Mail an info@ewerk-ridnaun.it. Detaillierte Erklärungen in Bezug auf die Stromrechnung finden Sie auf unserer Website https://psaierenergies.it/ridnaun');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Comunicazioni');
        SuperChildNode3:=XmlElement.Create('Categoria');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Codice');
        XmlTxt:=XmlText.Create('C');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Titolo');
        XmlTxt:=XmlText.Create('Angewandte Preiskomponenten in der Stromrechnung');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Testo');
        XmlTxt:=XmlText.Create('Diese Rechnung wurde gemäß der Beschlüsse Nr.136/2023, 721/2022, 719/2022, 720/2022, 491/2020, 427/2023, 429/2023 erstellt.');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Comunicazioni');
        SuperChildNode3:=XmlElement.Create('Categoria');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Codice');
        XmlTxt:=XmlText.Create('C');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Titolo');
        XmlTxt:=XmlText.Create('Mitteilung Arera ');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Testo');
        XmlTxt:=XmlText.Create('Aufgrund eines neuen Bilanzgesetzes aus dem Jahr 2018 (Beschluss Nr.205/17) haben Sie seit dem 1. März 2018 das Recht, Rechnungen anzufechten und nicht zu bezahlen, wenn diese einen Konsum verrechnen, der mindestens 2 Jahre oder mehr zurückliegt. Ihr Trader hat die Pflicht, Sie unmittelbar nach Ausstellung einer solchen Rechnung, jedoch mindesten 10 Tage vor Ablauf der Zahlungsfrist, über diese Möglichkeit der Anfechtung zu unterrichten. Für weitere Informationen wählen Sie die Grüne Nummer der Autorità di Regolazione per Energia Reti e Ambiente (ARERA) 800 166 654.');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Comunicazioni');
        SuperChildNode3:=XmlElement.Create('Categoria');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Codice');
        XmlTxt:=XmlText.Create('C');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Titolo');
        XmlTxt:=XmlText.Create('Sozialbonus');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Testo');
        XmlTxt:=XmlText.Create('Strom und Gas Sozialbonus für wirtschaftliche Härtefälle. Um das Verfahren für die automatische Anerkennung der Sozialbonus für Strom und Gas in wirtschaftlichen Härtefällen zu aktivieren, muss man jedes Jahr die Dichiarazione Sostitutiva Unica (DSU) vorlegen und eine ISEE-Bescheinigung (https://www.inps.it/prestazioni-servizi/comecompilare-la-dsu-e-richiedere-l-isee ) innerhalb der in den Vorschriften vorgesehenen Schwellenwerte erhalten. Für das Jahr 2023 liegt diese Schwelle bei 15.000 € bzw. für Haushalte mit mindestens vier unterhaltsberechtigten Kindern bei 20.000 €. Alternativ muss der Haushalt Inhaber eines Bürgergeldes oder einer Pension sein. Weitere Informationen erhalten Sie unter der gebührenfreien Rufnummer 800.166654 oder unter https://www.arera.it/it/bonus_sociale.htm.');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Comunicazioni');
        SuperChildNode3:=XmlElement.Create('Categoria');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Codice');
        XmlTxt:=XmlText.Create('C');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Titolo');
        XmlTxt:=XmlText.Create('Tutela Graduale');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Testo');
        XmlTxt:=XmlText.Create('Sehr geehrte Kundin, sehr geehrter Kunde, der Wechsel Ihres Energievertrags oder -lieferanten ist einfach, kostenlos und erfordert keinen Austausch des Zählers oder eine Unterbrechung der Versorgung. Es gibt verschiedene Arten von Strom- und Gasangeboten und Sie können diese auf www.ilportaleofferte.it von ARERA, der einzigen öffentlichen und unabhängigen Website, vergleichen. Sie können auch PLACET-Angebote mit von der Behörde definierten Vertragsbedingungen und einem vom Lieferanten festgelegten Preis finden. Weitere Informationen auf www.arera.it oder unter der gebührenfreien Nummer 800 166 654.');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Comunicazioni');
        SuperChildNode3:=XmlElement.Create('Categoria');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Codice');
        XmlTxt:=XmlText.Create('C');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Titolo');
        XmlTxt:=XmlText.Create('ARERA Mitteilung 2023');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Testo');
        XmlTxt:=XmlText.Create('Sie können auf folgender Homepage : www.arera.it/consumatori folgende Informationen einholen: \-andere verfügbaren, auf Ihren Bedürfnisse zugeschnittenen Lieferangeboten \-Informationen in Bezug auf ihre Verbrauchsangewohnheiten \-Informationen über Ihre  historischen Verbräuche  \-Verbrauchsangewohnheiten der letzten Jahre miteinander zu vergleichen \-Erläuterung Ihrer Rechte');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Comunicazioni');
        SuperChildNode3:=XmlElement.Create('Categoria');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Codice');
        XmlTxt:=XmlText.Create('C');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Titolo');
        XmlTxt:=XmlText.Create('Beschluss 637/2022/R/com');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Testo');
        XmlTxt:=XmlText.Create('Alle Energieträger können auch in den Genuss von Förderungen kommen, die nicht in den abgerechneten Beträgen enthalten sind.');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Comunicazioni');
        SuperChildNode3:=XmlElement.Create('Categoria');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Codice');
        XmlTxt:=XmlText.Create('P');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Titolo');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('Testo');
        XmlTxt:=XmlText.Create(StrSubstNo('Der Rechnungsbetrag zu Ihren Gunsten beträgt %1 Euro.', SalesInvoiceHeader."Amount Including VAT"));
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        //Eventi
        SuperChileNode:=XmlElement.Create('Eventi');
        SuperChildNode2:=XmlElement.Create('Evento');
        SuperChildNode3:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('CodiceEvento');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('InizioEvento');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('FineEvento');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        //LegendaIva
        SuperChileNode:=XmlElement.Create('LegendaIva');
        SuperChildNode2:=XmlElement.Create('VoceIva');
        SuperChildNode3:=XmlElement.Create('DescrizioneIva');
        XmlTxt:=XmlText.Create('IVA 10% - VAT 10%');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('CodiceIva');
        XmlTxt:=XmlText.Create('');
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChildNode3:=XmlElement.Create('AliquotaIva');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."VAT %"));
        SuperChildNode3.Add(XmlTxt);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        //Agente
        SuperChileNode:=XmlElement.Create('Agente');
        SuperChildNode2:=XmlElement.Create('Immagine');
        XmlTxt:=XmlText.Create('');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Nominativo');
        XmlTxt:=XmlText.Create('');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Telefono');
        XmlTxt:=XmlText.Create('');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('Email');
        XmlTxt:=XmlText.Create('');
        SuperChildNode2.Add(XmlTxt);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        //ElementiDettaglio
        SuperChileNode:=XmlElement.Create('ElementiDettaglio');
        SuperChildNode2:=XmlElement.Create('Servizi');
        SuperChildNode3:=XmlElement.Create('Servizio');
        SuperChildNode4:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('DETTAGLIO RICALCOLI');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Totale');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Quote');
        SuperChildNode5:=XmlElement.Create('Quota');
        SuperChildNode6:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('Rettifica Consumi');
        SuperChildNode6.Add(XmlTxt);
        SuperChildNode5.Add(SuperChildNode6);
        SuperChildNode6:=XmlElement.Create('Totale');
        XmlTxt:=XmlText.Create('');
        SuperChildNode6.Add(XmlTxt);
        SuperChildNode5.Add(SuperChildNode6);
        SuperChildNode6:=XmlElement.Create('Dettagli');
        SuperChildNode7:=XmlElement.Create('QuotaDettaglio');
        SuperChildNode8:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Dal');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Al');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Scaglione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Quantita');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('UnitaMisura');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('ImportoUnitario');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Imponibile');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('AliquotaIva');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('CodiceIva');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode6.Add(SuperChildNode7);
        SuperChildNode5.Add(SuperChildNode6);
        SuperChildNode6:=XmlElement.Create('Acconti');
        SuperChildNode7:=XmlElement.Create('QuotaDettaglioAcconti');
        SuperChildNode8:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Dal');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Al');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Quantita');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('UnitaMisura');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('ImportoUnitario');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Imponibile');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('AliquotaIva');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('CodiceIva');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode6.Add(SuperChildNode7);
        SuperChildNode5.Add(SuperChildNode6);
        SuperChildNode4.Add(SuperChildNode5);
        SuperChildNode5:=XmlElement.Create('Quota');
        SuperChildNode6:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('Conguaglio Tariffario');
        SuperChildNode6.Add(XmlTxt);
        SuperChildNode5.Add(SuperChildNode6);
        SuperChildNode6:=XmlElement.Create('Totale');
        XmlTxt:=XmlText.Create('');
        SuperChildNode6.Add(XmlTxt);
        SuperChildNode5.Add(SuperChildNode6);
        SuperChildNode6:=XmlElement.Create('Dettagli');
        SuperChildNode7:=XmlElement.Create('QuotaDettaglio');
        SuperChildNode8:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Dal');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Al');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Scaglione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Quantita');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('UnitaMisura');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('ImportoUnitario');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Imponibile');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('AliquotaIva');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('CodiceIva');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode6.Add(SuperChildNode7);
        SuperChildNode5.Add(SuperChildNode6);
        SuperChildNode6:=XmlElement.Create('Acconti');
        SuperChildNode7:=XmlElement.Create('QuotaDettaglioAcconti');
        SuperChildNode8:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Dal');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Al');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Quantita');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('UnitaMisura');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('ImportoUnitario');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('Imponibile');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('AliquotaIva');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode8:=XmlElement.Create('CodiceIva');
        XmlTxt:=XmlText.Create('');
        SuperChildNode8.Add(XmlTxt);
        SuperChildNode7.Add(SuperChildNode8);
        SuperChildNode6.Add(SuperChildNode7);
        SuperChildNode5.Add(SuperChildNode6);
        SuperChildNode4.Add(SuperChildNode5);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode2.Add(SuperChildNode3);
        Clear(ResourceNoList);
        Clear(ResourceNo);
        SalesInvoiceLine.Reset();
        SalesInvoiceLine.SetRange("Document No.", SalesInvoiceHeader."No.");
        if SalesInvoiceLine.FindSet()then repeat if not ResourceNoList.Contains(SalesInvoiceLine."No.")then ResourceNoList.Add(SalesInvoiceLine."No.");
            until SalesInvoiceLine.Next() = 0;
        foreach ResourceNo in ResourceNoList do begin
            SalesInvoiceLine.Reset();
            SalesInvoiceLine.SetRange("Document No.", SalesInvoiceHeader."No.");
            SalesInvoiceLine.SetRange("No.", ResourceNo);
            if SalesInvoiceLine.FindSet()then begin
                SuperChildNode3:=XmlElement.Create('Servizio');
                SuperChildNode4:=XmlElement.Create('Descrizione');
                XmlTxt:=XmlText.Create(SalesInvoiceLine.Description);
                SuperChildNode4.Add(XmlTxt);
                SuperChildNode3.Add(SuperChildNode4);
                SuperChildNode4:=XmlElement.Create('Totale');
                XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."Amount Including VAT"));
                SuperChildNode4.Add(XmlTxt);
                SuperChildNode3.Add(SuperChildNode4);
                SuperChildNode4:=XmlElement.Create('Quote');
                SuperChildNode5:=XmlElement.Create('Quota');
                SuperChildNode6:=XmlElement.Create('Descrizione');
                XmlTxt:=XmlText.Create(SalesInvoiceLine.Description);
                SuperChildNode6.Add(XmlTxt);
                SuperChildNode5.Add(SuperChildNode6);
                SuperChildNode6:=XmlElement.Create('Totale');
                XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."Amount Including VAT"));
                SuperChildNode6.Add(XmlTxt);
                SuperChildNode5.Add(SuperChildNode6);
                SuperChildNode6:=XmlElement.Create('Dettagli');
                repeat SuperChildNode7:=XmlElement.Create('QuotaDettaglio');
                    SuperChildNode8:=XmlElement.Create('Descrizione');
                    XmlTxt:=XmlText.Create(SalesInvoiceLine.Description);
                    SuperChildNode8.Add(XmlTxt);
                    SuperChildNode7.Add(SuperChildNode8);
                    SuperChildNode8:=XmlElement.Create('Dal');
                    XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."Effective Start Date"));
                    SuperChildNode8.Add(XmlTxt);
                    SuperChildNode7.Add(SuperChildNode8);
                    SuperChildNode8:=XmlElement.Create('Al');
                    XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."Effective End Date"));
                    SuperChildNode8.Add(XmlTxt);
                    SuperChildNode7.Add(SuperChildNode8);
                    SuperChildNode8:=XmlElement.Create('Scaglione');
                    XmlTxt:=XmlText.Create('');
                    SuperChildNode8.Add(XmlTxt);
                    SuperChildNode7.Add(SuperChildNode8);
                    SuperChildNode8:=XmlElement.Create('Quantita');
                    XmlTxt:=XmlText.Create(Format(SalesInvoiceLine.Quantity));
                    SuperChildNode8.Add(XmlTxt);
                    SuperChildNode7.Add(SuperChildNode8);
                    SuperChildNode8:=XmlElement.Create('UnitaMisura');
                    XmlTxt:=XmlText.Create(SalesInvoiceLine."Unit of Measure");
                    SuperChildNode8.Add(XmlTxt);
                    SuperChildNode7.Add(SuperChildNode8);
                    SuperChildNode8:=XmlElement.Create('ImportoUnitario');
                    XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."Unit Price"));
                    SuperChildNode8.Add(XmlTxt);
                    SuperChildNode7.Add(SuperChildNode8);
                    SuperChildNode8:=XmlElement.Create('Imponibile');
                    XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."Line Amount"));
                    SuperChildNode8.Add(XmlTxt);
                    SuperChildNode7.Add(SuperChildNode8);
                    SuperChildNode8:=XmlElement.Create('AliquotaIva');
                    XmlTxt:=XmlText.Create(Format(SalesInvoiceLine."VAT %"));
                    SuperChildNode8.Add(XmlTxt);
                    SuperChildNode7.Add(SuperChildNode8);
                    SuperChildNode8:=XmlElement.Create('CodiceIva');
                    XmlTxt:=XmlText.Create(SalesInvoiceLine."VAT Clause Code");
                    SuperChildNode8.Add(XmlTxt);
                    SuperChildNode7.Add(SuperChildNode8);
                    SuperChildNode6.Add(SuperChildNode7);
                until SalesInvoiceLine.Next() = 0;
                SuperChildNode5.Add(SuperChildNode6);
                SuperChildNode6:=XmlElement.Create('Acconti');
                SuperChildNode7:=XmlElement.Create('QuotaDettaglioAcconti');
                SuperChildNode8:=XmlElement.Create('Descrizione');
                XmlTxt:=XmlText.Create('');
                SuperChildNode8.Add(XmlTxt);
                SuperChildNode7.Add(SuperChildNode8);
                SuperChildNode8:=XmlElement.Create('Dal');
                XmlTxt:=XmlText.Create('');
                SuperChildNode8.Add(XmlTxt);
                SuperChildNode7.Add(SuperChildNode8);
                SuperChildNode8:=XmlElement.Create('Al');
                XmlTxt:=XmlText.Create('');
                SuperChildNode8.Add(XmlTxt);
                SuperChildNode7.Add(SuperChildNode8);
                SuperChildNode8:=XmlElement.Create('Quantita');
                XmlTxt:=XmlText.Create('');
                SuperChildNode8.Add(XmlTxt);
                SuperChildNode7.Add(SuperChildNode8);
                SuperChildNode8:=XmlElement.Create('UnitaMisura');
                XmlTxt:=XmlText.Create('');
                SuperChildNode8.Add(XmlTxt);
                SuperChildNode7.Add(SuperChildNode8);
                SuperChildNode8:=XmlElement.Create('ImportoUnitario');
                XmlTxt:=XmlText.Create('');
                SuperChildNode8.Add(XmlTxt);
                SuperChildNode7.Add(SuperChildNode8);
                SuperChildNode8:=XmlElement.Create('Imponibile');
                XmlTxt:=XmlText.Create('');
                SuperChildNode8.Add(XmlTxt);
                SuperChildNode7.Add(SuperChildNode8);
                SuperChildNode8:=XmlElement.Create('AliquotaIva');
                XmlTxt:=XmlText.Create('');
                SuperChildNode8.Add(XmlTxt);
                SuperChildNode7.Add(SuperChildNode8);
                SuperChildNode8:=XmlElement.Create('CodiceIva');
                XmlTxt:=XmlText.Create('');
                SuperChildNode8.Add(XmlTxt);
                SuperChildNode7.Add(SuperChildNode8);
                SuperChildNode6.Add(SuperChildNode7);
                SuperChildNode5.Add(SuperChildNode6);
                SuperChildNode4.Add(SuperChildNode5);
                SuperChildNode3.Add(SuperChildNode4);
                SuperChildNode2.Add(SuperChildNode3);
            end;
        end;
        SuperChileNode.Add(SuperChildNode2);
        SuperChildNode2:=XmlElement.Create('MorositaInteressiApplicatiBollette');
        SuperChildNode3:=XmlElement.Create('MorositaInteressiApplicati');
        SuperChildNode4:=XmlElement.Create('NumeroDocumento');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('DataScadenza');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('DataEmissione');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('ImportoOriginale');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('TotaleInteressiAddebitati');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('InteressiDal');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('InteressiAl');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('NumeroGiorni');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('InteressiTassoPercentuale');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode4:=XmlElement.Create('Valore');
        XmlTxt:=XmlText.Create('');
        SuperChildNode4.Add(XmlTxt);
        SuperChildNode3.Add(SuperChildNode4);
        SuperChildNode2.Add(SuperChildNode3);
        SuperChileNode.Add(SuperChildNode2);
        ChildNode.Add(SuperChileNode);
        ParentNode.Add(ChildNode);
        RootNode.Add(ParentNode);
        ParentNode:=XmlElement.Create('Descrizione');
        XmlTxt:=XmlText.Create(Format(SalesInvoiceHeader."Document Date", 0, '<Month,2>/<Year4>') + ' - ' + Language.Name + ' lingua tedesca');
        ParentNode.Add(XmlTxt);
        RootNode.Add(ParentNode);
        ParentNode:=XmlElement.Create('LottoServizio');
        XmlTxt:=XmlText.Create('E');
        ParentNode.Add(XmlTxt);
        RootNode.Add(ParentNode);
        ParentNode:=XmlElement.Create('CodiceAzienda');
        XmlTxt:=XmlText.Create('00I6');
        ParentNode.Add(XmlTxt);
        RootNode.Add(ParentNode);
        ParentNode:=XmlElement.Create('Versione');
        XmlTxt:=XmlText.Create('w');
        ParentNode.Add(XmlTxt);
        RootNode.Add(ParentNode);
        ParentNode:=XmlElement.Create('AziendaRagioneSociale');
        XmlTxt:=XmlText.Create(CompanyInformation.Name);
        ParentNode.Add(XmlTxt);
        RootNode.Add(ParentNode);
        ParentNode:=XmlElement.Create('AziendaInternet');
        XmlTxt:=XmlText.Create(CompanyInformation."Home Page");
        ParentNode.Add(XmlTxt);
        RootNode.Add(ParentNode);
        ParentNode:=XmlElement.Create('AziendaTelAutolettura');
        XmlTxt:=XmlText.Create(CompanyInformation."Phone No.");
        ParentNode.Add(XmlTxt);
        RootNode.Add(ParentNode);
        ParentNode:=XmlElement.Create('AziendaCallCenterFisso');
        XmlTxt:=XmlText.Create('');
        ParentNode.Add(XmlTxt);
        RootNode.Add(ParentNode);
        ParentNode:=XmlElement.Create('AziendaCallCenterCell');
        XmlTxt:=XmlText.Create(CompanyInformation."Phone No.");
        ParentNode.Add(XmlTxt);
        RootNode.Add(ParentNode);
        TempBlob.CreateInStream(IStream);
        TempBlob.CreateOutStream(OStream);
        XmlDoc.WriteTo(OStream);
        //Download File
        FileName:=SalesInvoiceHeader."No." + '_Eglue' + '.xml';
        File.DownloadFromStream(IStream, '', '', '', Filename);
    end;
    local procedure GetDateInterval(DatePeiord: Text; var StartDate: date; var EndDate: Date): Integer var
    begin
        Evaluate(StartDate, SelectStr(1, ConvertStr(DatePeiord, '.', ',')));
        Evaluate(EndDate, SelectStr(3, ConvertStr(DatePeiord, '.', ',')));
        exit(1 + DATE2DMY(EndDate, 2) - DATE2DMY(StartDate, 2) + 12 * (DATE2DMY(EndDate, 3) - DATE2DMY(StartDate, 3)));
    end;
}
